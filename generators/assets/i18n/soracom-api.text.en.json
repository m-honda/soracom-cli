{
  "auth": {
    "auth": {
      "post": {
        "summary": "Performs authentication to access to the SORACOM API.",
        "description": "Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards",
        "parameters": {
          "auth": {
            "description": "Authentication request."
          }
        },
        "responses": {
          "status200": {
            "description": "Authentication successful."
          },
          "status401": {
            "description": "Authentication failed."
          }
        },
        "cli": {
          "summary": "Performs authentication and issue an API Key and an API Token if successful.",
          "description": "Performs authentication to access to the SORACOM API.\nTo perform authentication by a root account, specify `--email` and `--password`.\nTo perform authentication by an AuthKey, specify `--auth-key-id` and `--auth-key`.\nTo perform authentication by a SAM user, specify `--operator-id`, `--user-name` and `--password`. An API Key and an API Token will be shown if successful."
        }
      }
    },
    "issue_password_reset_token": {
      "post": {
        "summary": "Issues a password reset token for the operator.",
        "description": "Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator's password.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid email address."
          }
        },
        "cli": {
          "summary": "Issues a password reset token for the operator.",
          "description": "Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, run 'soracom auth verify-password-reset-token' with the token to update operator's password."
        }
      }
    },
    "verify_password_reset_token": {
      "post": {
        "summary": "Verifies the password reset token and updates password.",
        "description": "Updates the operator's password if the password reset token is verified.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid token."
          },
          "status404": {
            "description": "Token expired."
          }
        },
        "cli": {
          "summary": "Verifies the password reset token and updates password.",
          "description": "Updates the operator's password if the password reset token is verified."
        }
      }
    }
  },
  "credentials": {
    "list_credentials": {
      "get": {
        "summary": "List of credentials.",
        "description": "Returns a list of credentials.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_credential": {
      "post": {
        "summary": "Create a credential.",
        "description": "Creates a new credential.",
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "update_credential": {
      "put": {
        "summary": "Update a credential.",
        "description": "Updates a credential.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "There was an error in the request or the specified token has already expired. (In the latter case, you will need to use the /auth API to do authentication once again.)"
          }
        }
      }
    },
    "delete_credential": {
      "delete": {
        "summary": "Delete a credential.",
        "description": "Deletes a credential."
      }
    },
    "cli": {
      "summary": "List, create, update or delete credentials sets.",
      "description": "List, create, update or delete credentials sets."
    }
  },
  "operator": {
    "create_operator": {
      "post": {
        "summary": "Create Operator.",
        "description": "Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operatorâ€™s registration.",
        "responses": {
          "status200": {
            "description": "Operator created."
          },
          "status400": {
            "description": "The e-mail address is already registered or the password has an incorrect format."
          }
        }
      }
    },
    "issue_email_change_token": {
      "post": {
        "summary": "Issue Email Change Token.",
        "description": "Sends an e-mail with a one-time token for executing the e-mail address change."
      }
    },
    "verify_email_change_token": {
      "post": {
        "summary": "Verify Email Change Token.",
        "description": "Verifies the token for the e-mail address change, and then changes the e-mail address."
      }
    },
    "verify_operator": {
      "post": {
        "summary": "Verify Operator.",
        "description": "Verifies the operator's registration. Called by setting as parameter the one-time verification token received via e-mail.",
        "responses": {
          "status200": {
            "description": "Registration successful."
          },
          "status400": {
            "description": "The one-time token is incorrect."
          },
          "status404": {
            "description": "The one-time token has expired."
          }
        }
      }
    },
    "get_operator": {
      "get": {
        "summary": "Get Operator.",
        "description": "Returns information about the operator.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid Operator Id"
          }
        }
      }
    },
    "list_operator_auth_keys": {
      "get": {
        "summary": "List Operator AuthKeys.",
        "description": "Returns the operator's AuthKey list.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "generate_operator_auth_key": {
      "post": {
        "summary": "Generate Operator AuthKey.",
        "description": " Generates an AuthKey for the operator.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_operator_auth_key": {
      "delete": {
        "summary": "Delete Operator AuthKey.",
        "description": "Deletes an AuthKey from the operator.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_operator_password": {
      "post": {
        "summary": "Update Operator Password.",
        "description": "Updates the operator's password.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid password."
          }
        }
      }
    },
    "generate_support_token": {
      "post": {
        "summary": "Generate Token for Support Console.",
        "description": "Returns a token for accessing the support console.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid Operator Id"
          },
          "status403": {
            "description": "Invalid token."
          }
        }
      }
    },
    "generate_auth_token": {
      "post": {
        "summary": "Generate Authentication Token.",
        "description": "Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "There was an error in the request or the specified token has already expired. (In the latter case, you will need to use the /auth API to do authentication once again.)"
          }
        }
      }
    },
    "cli": {
      "summary": "Manage operators.",
      "description": "Manage operators."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete operator's AuthKeys.",
        "description": "List, create or delete operator's AuthKeys."
      }
    }
  },
  "roles": {
    "list_roles": {
      "get": {
        "summary": "List Roles.",
        "description": "Returns a list of roles.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_role": {
      "get": {
        "summary": "Get Role.",
        "description": "Retrieves a role.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_role": {
      "post": {
        "summary": "Create Role.",
        "description": "Adds a new role.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_role": {
      "put": {
        "summary": "Update Role.",
        "description": "Edits a role."
      }
    },
    "delete_role": {
      "delete": {
        "summary": "Delete Role.",
        "description": "Deletes a role."
      }
    },
    "list_role_attached_users": {
      "get": {
        "summary": "List Role Attached Users.",
        "description": "Retrieves a list of users attached to a role.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_user_roles": {
      "get": {
        "summary": "List User Roles.",
        "description": "Retrieves a list of the user's roles.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "attach_role": {
      "post": {
        "summary": "Attach Role to User.",
        "description": "Attaches a role to a user."
      }
    },
    "detach_role": {
      "delete": {
        "summary": "Detach Role from User.",
        "description": "Detaches a role from a user."
      }
    },
    "cli": {
      "summary": "List, create, update or delete roles.",
      "description": "List, create, update or delete roles."
    }
  },
  "shipping_addresses": {
    "list_shipping_addresses": {
      "get": {
        "summary": "List shipping addresses.",
        "description": "Returns a list of shipping addresses.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_shipping_address": {
      "post": {
        "summary": "Create shipping address.",
        "description": "Creates a new shipping address.",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status201": {
            "description": "shippingAddreddId"
          }
        }
      }
    },
    "get_shipping_address": {
      "get": {
        "summary": "Get shipping address.",
        "description": "Returns a shipping address.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_shipping_address": {
      "put": {
        "summary": "Update shipping address.",
        "description": "Updates a shipping address."
      }
    },
    "delete_shipping_address": {
      "delete": {
        "summary": "Delete shipping address.",
        "description": "Deletes a shipping address."
      }
    },
    "cli": {
      "summary": "List, create, update or delete shipping addresses.",
      "description": "List, create, update or delete shipping addresses."
    }
  },
  "users": {
    "list_users": {
      "get": {
        "summary": "List Users.",
        "description": "Returns a list of SAM users.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_user": {
      "get": {
        "summary": "Get User.",
        "description": "Returns a SAM user.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_user": {
      "post": {
        "summary": "Create User.",
        "description": "Adds a new SAM user."
      }
    },
    "update_user": {
      "put": {
        "summary": "Update User.",
        "description": "Updates the SAM user.",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "delete_user": {
      "delete": {
        "summary": "Delete User.",
        "description": "Deletes the SAM user.",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "list_user_auth_keys": {
      "get": {
        "summary": "List User AuthKeys.",
        "description": "Returns the SAM user's AuthKey list.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "generate_user_auth_key": {
      "post": {
        "summary": "Generate AuthKey.",
        "description": "Generates an AuthKey for the SAM user.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_user_auth_key": {
      "get": {
        "summary": "Get AuthKey.",
        "description": "Returns the SAM user's AuthKey.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_user_auth_key": {
      "delete": {
        "summary": "Delete User AuthKey.",
        "description": "Deletes an AuthKey from the SAM user.",
        "responses": {
          "status404": {
            "description": "AuthKey not found."
          }
        }
      }
    },
    "has_user_password": {
      "get": {
        "summary": "Has User Password.",
        "description": "Retrieves whether the SAM user has a password or not.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_user_password": {
      "post": {
        "summary": "Create Password.",
        "description": "Creates a password for the SAM user."
      }
    },
    "update_user_password": {
      "put": {
        "summary": "Update Password.",
        "description": "Updates the password of the SAM user."
      }
    },
    "delete_user_password": {
      "delete": {
        "summary": "Delete Password.",
        "description": "Deletes the user's password.",
        "responses": {
          "status404": {
            "description": "Password registration is required."
          }
        }
      }
    },
    "get_user_permission": {
      "get": {
        "summary": "Get User Permission.",
        "description": "Retrieves the SAM user's permissions.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_user_permission": {
      "put": {
        "summary": "Update Permission to User.",
        "description": "Updates the SAM user's permissions."
      }
    },
    "cli": {
      "summary": "Manage SAM users.",
      "description": "Manage SAM users."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete SAM user's AuthKeys.",
        "description": "List, create or delete SAM user's AuthKeys."
      }
    },
    "password": {
      "cli": {
        "summary": "Create, update or delete SAM user's password.",
        "description": "Create, update or delete SAM user's password."
      }
    },
    "permissions": {
      "cli": {
        "summary": "Show, create and update SAM user's permission.",
        "description": "Show, create and update SAM user's permission."
      }
    }
  },
  "subscribers": {
    "list_subscribers": {
      "get": {
        "summary": "List Subscribers.",
        "description": "Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "tag_name": {
            "description": "Tag name for filtering the search (exact match)."
          },
          "tag_value": {
            "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "status_filter": {
            "description": "Status for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `active`, `inactive`, `ready`, `instock`, `shipped`, `suspended`, and `terminated`."
          },
          "speed_class_filter": {
            "description": "Speed class for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `s1.minimum`, `s1.slow`, `s1.standard`, `s1.fast`"
          },
          "serial_number_filter": {
            "description": "Serial number for filtering the search. Can specify multiple values delimited by `|`. Returns subscribers with serial number starting with the specified value(s)."
          },
          "limit": {
            "description": "Maximum number of subscribers to retrieve."
          },
          "last_evaluated_key": {
            "description": "The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of subscibers."
          }
        }
      }
    },
    "register_subscriber": {
      "post": {
        "summary": "Register Subscriber.",
        "description": "Registers a subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "subscriber": {
            "description": "subscriber"
          }
        },
        "responses": {
          "status201": {
            "description": "Subscriber registration complete."
          }
        }
      }
    },
    "get_subscriber": {
      "get": {
        "summary": "Get Subscriber.",
        "description": "Returns information about the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "update_speedclass": {
      "post": {
        "summary": "Update Subscriber speed class.",
        "description": "Changes the speed class of the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "delete_session": {
      "post": {
        "summary": "Delete Session",
        "description": "Deletes session for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "activate_subscriber": {
      "post": {
        "summary": "Activate Subscriber.",
        "description": "Activates status of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "deactivate_subscriber": {
      "post": {
        "summary": "Deactivate Subscriber.",
        "description": "Deactivates specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "terminate_subscriber": {
      "post": {
        "summary": "Terminate Subscriber.",
        "description": "Terminates the specified subscriber",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "suspend_subscriber": {
      "post": {
        "summary": "Suspend Subscriber.",
        "description": "Suspends the specified subscriber",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "enable_termination": {
      "post": {
        "summary": "Enable Termination of Subscriber.",
        "description": "Enables termination of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "disable_termination": {
      "post": {
        "summary": "Disable Termination of Subscriber.",
        "description": "Disables termination of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "set_expirytime": {
      "post": {
        "summary": "Update Expiry Time of Subscriber.",
        "description": "Updates expiry time of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "request": {
            "description": "Expiry time after the update (unixtime: in milliseconds)."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_expirytime": {
      "post": {
        "summary": "Delete Expiry Time of Subscriber.",
        "description": "Deletes expiry time of specified subscriber and changes it to indefinite.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status204": {
            "description": "Change of specified subscriber's expiry time to indefinite complete."
          },
          "status404": {
            "description": "The specified subscriber does not exist or the subscriber does not have an expiry time."
          }
        }
      }
    },
    "set_group": {
      "post": {
        "summary": "Set Group to Subscriber.",
        "description": "Sets or overwrites a group for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "group": {
            "description": "Group (may include ID only)."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_group": {
      "post": {
        "summary": "Unset Group to Subscriber.",
        "description": "Removes the group configuration from the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist or the subscriber does not belong to a group."
          }
        }
      }
    },
    "set_imei_lock": {
      "post": {
        "summary": "Set IMEI lock configuration for Subscriber.",
        "description": "Set IMEI that the subscriber should be locked to.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "imeiLock": {
            "description": "IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.)"
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status400": {
            "description": "Invalid IMEI string or subscriber is offline and IMEI not specified."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_imei_lock": {
      "post": {
        "summary": "Unset IMEI lock configuration for Subscriber.",
        "description": "Remove any existing IMEI lock configuration for the subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "list_session_events": {
      "get": {
        "summary": "List Session Events.",
        "description": "Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "from": {
            "description": "Start time for the events search range (unixtime)."
          },
          "to": {
            "description": "End time for the events search range (unixtime)."
          },
          "limit": {
            "description": "Maximum number of events to retrieve."
          },
          "last_evaluated_key": {
            "description": "The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of session events"
          }
        }
      }
    },
    "put_subscriber_tags": {
      "put": {
        "summary": "Bulk Insert or Update Subscriber Tags.",
        "description": "Inserts/updates tags for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "tags": {
            "description": "Array of tags to be inserted/updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "delete_subscriber_tag": {
      "delete": {
        "summary": "Delete Subscriber Tag.",
        "description": "Deletes a tag from the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "tag_name": {
            "description": "Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified tag complete."
          },
          "status404": {
            "description": "The specified subscriber or the tag does not exist."
          }
        }
      }
    },
    "issue_subscriber_transfer_token": {
      "post": {
        "summary": "Issue Subscribers Transfer Token.",
        "description": "Sends the subscriber's inter-operator control transfer token to the control destination operator.",
        "parameters": {
          "request": {
            "description": "Destination operator's email address, Operator ID, transferring IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "verify_subscriber_transfer_token": {
      "post": {
        "summary": "Verify Subscriber Transfer Token.",
        "description": "Verifies the subscriber's control transfer token, and executes the transfer. This API is called from the operator of the control destination.",
        "parameters": {
          "request": {
            "description": "Subscriber transfer token that noficed via email."
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_subscriber_transfer_token": {
      "delete": {
        "summary": "Delete Subscribers Transfer Token.",
        "description": "Deletes the subscriber's inter-operator control transfer token, and cancels the control transfer.",
        "parameters": {
          "token": {
            "description": "token"
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion implemented."
          },
          "status404": {
            "description": "The token does not exist."
          }
        }
      }
    },
    "get_data_from_subscriber": {
      "get": {
        "summary": "Get data sent from a subscriber.",
        "description": "Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber that generated data entries."
          },
          "from": {
            "description": "Start time for the data entries search range (unixtime in milliseconds)."
          },
          "to": {
            "description": "End time for the data entries search range (unixtime in milliseconds)."
          },
          "sort": {
            "description": "Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first)."
          },
          "limit": {
            "description": "Maximum number of data entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of data entries."
          }
        }
      }
    },
    "cli": {
      "summary": "Manage subscribers.",
      "description": "Manage subscribers."
    }
  },
  "lora_devices": {
    "list_lora_devices": {
      "get": {
        "summary": "List LoRa devices.",
        "description": "Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "tag_name": {
            "description": "Tag name for filtering the search (exact match)."
          },
          "tag_value": {
            "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "limit": {
            "description": "Maximum number of LoRa devices to retrieve."
          },
          "last_evaluated_key": {
            "description": "The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of LoRa devices."
          }
        }
      }
    },
    "register_lora_device": {
      "post": {
        "summary": "Register LoRa device.",
        "description": "Registers a LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          },
          "lora_device": {
            "description": "LoRa device"
          }
        },
        "responses": {
          "status201": {
            "description": "LoRa device registration complete."
          }
        }
      }
    },
    "get_lora_device": {
      "get": {
        "summary": "Get LoRa device.",
        "description": "Returns information about the specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "get_data_from_lora_device": {
      "get": {
        "summary": "Get data sent from a LoRa device.",
        "description": "Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target subscriber that generated data entries."
          },
          "from": {
            "description": "Start time for the data entries search range (unixtime in milliseconds)."
          },
          "to": {
            "description": "End time for the data entries search range (unixtime in milliseconds)."
          },
          "sort": {
            "description": "Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first)."
          },
          "limit": {
            "description": "Maximum number of data entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of data entries."
          }
        }
      }
    },
    "send_data_to_lora_device": {
      "post": {
        "summary": "Send data to a LoRa device.",
        "description": "Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.",
        "parameters": {
          "device_id": {
            "description": "ID of the recipient device."
          },
          "data": {
            "description": "Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even."
          }
        },
        "responses": {
          "status204": {
            "description": "Data has been received and sent to the LoRa network server for the recipient device to retrieve."
          },
          "status404": {
            "description": "No such device found."
          }
        }
      }
    },
    "terminate_lora_device": {
      "post": {
        "summary": "Terminate LoRa device.",
        "description": "Terminates the specified LoRa device",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "enable_termination": {
      "post": {
        "summary": "Enable Termination of LoRa device.",
        "description": "Enables termination of specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "disable_termination": {
      "post": {
        "summary": "Disable Termination of LoRa device.",
        "description": "Disables termination of specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "set_group": {
      "post": {
        "summary": "Set Group of LoRa device.",
        "description": "Sets or overwrites a group for the specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          },
          "group": {
            "description": "Group (may include ID only)."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "unset_group": {
      "post": {
        "summary": "Unset Group of LoRa device.",
        "description": "Removes the group configuration from the specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist or the LoRa device does not belong to a group."
          }
        }
      }
    },
    "put_lora_device_tags": {
      "put": {
        "summary": "Bulk Insert or Update LoRa device Tags.",
        "description": "Inserts/updates tags for the specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "Device ID of the target LoRa device."
          },
          "tags": {
            "description": "Array of tags to be inserted/updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The LoRa device's detailed information after the update."
          },
          "status404": {
            "description": "The specified LoRa device does not exist."
          }
        }
      }
    },
    "delete_lora_device_tag": {
      "delete": {
        "summary": "Delete LoRa device Tag.",
        "description": "Deletes a tag from the specified LoRa device.",
        "parameters": {
          "device_id": {
            "description": "device ID of the target LoRa device."
          },
          "tag_name": {
            "description": "Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified tag complete."
          },
          "status404": {
            "description": "The specified LoRa device or the tag does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa devices.",
      "description": "Manage LoRa devices."
    }
  },
  "lora_gateways": {
    "list": {
      "summary": "List LoRa Gateways.",
      "description": "Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "tag_name": {
          "description": "Tag name for filtering the search (exact match)."
        },
        "tag_value": {
          "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
        },
        "tag_value_match_mode": {
          "description": "Tag match mode."
        },
        "limit": {
          "description": "Maximum number of LoRa devices to retrieve."
        },
        "last_evaluated_key": {
          "description": "The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa gateways."
        }
      }
    },
    "get": {
      "summary": "Get LoRa gateway.",
      "description": "Returns information about the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "Gateway ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "terminate": {
      "summary": "Terminate LoRa gateway.",
      "description": "Terminates the specified LoRa gateway",
      "parameters": {
        "gateway_id": {
          "description": "Device ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "enable_termination": {
      "summary": "Enable Termination of LoRa gateway.",
      "description": "Enables termination of specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "disable_termination": {
      "summary": "Disable Termination of LoRa gateway.",
      "description": "Disables termination of specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "set_network_set": {
      "summary": "Set Network Set ID of LoRa gateway.",
      "description": "Sets or overwrites network set ID for the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "ns_id": {
          "description": "LoRa Network Set ID."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa device does not exist."
        }
      }
    },
    "unset_network_set": {
      "summary": "Unset Network Set ID of LoRa gateway.",
      "description": "Unset network set ID of the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "put_tags": {
      "summary": "Bulk Insert or Update LoRa gateway Tags.",
      "description": "Inserts/updates tags for the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "tags": {
          "description": "Array of tags to be inserted/updated."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "delete_tag": {
      "summary": "Delete LoRa gateway tag.",
      "description": "Deletes a tag from the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "tag_name": {
          "description": "Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
        }
      },
      "responses": {
        "status204": {
          "description": "Deletion of specified tag complete."
        },
        "status404": {
          "description": "The specified LoRa gateway or the tag does not exist."
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa gateways.",
      "description": "Manage LoRa gateways."
    }
  },
  "lora_network_sets": {
    "create": {
      "summary": "Create a LoRa network set.",
      "description": "Creates a specified LoRa network set",
      "parameters": {
        "lora_network_set": {
          "description": "Additional metadata such as tags for a LoRa network set to create."
        }
      },
      "responses": {
        "status201": {
          "description": "A LoRa network set was created."
        }
      }
    },
    "list": {
      "summary": "List LoRa Network Sets.",
      "description": "Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "tag_name": {
          "description": "Tag name for filtering the search (exact match)."
        },
        "tag_value": {
          "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
        },
        "tag_value_match_mode": {
          "description": "Tag match mode."
        },
        "limit": {
          "description": "Maximum number of LoRa devices to retrieve."
        },
        "last_evaluated_key": {
          "description": "The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa network sets."
        }
      }
    },
    "get": {
      "summary": "Get LoRa network set.",
      "description": "Returns information about the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa network set's detailed information."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "list_gateways": {
      "summary": "List LoRa Gateways in a Network Set.",
      "description": "Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "limit": {
          "description": "Maximum number of LoRa gateways to retrieve."
        },
        "last_evaluated_key": {
          "description": "The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa gateways."
        },
        "status404": {
          "description": "The specified network set does not exist."
        }
      }
    },
    "delete": {
      "summary": "Delete LoRa network set.",
      "description": "Deletes the specified LoRa network set",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        }
      },
      "responses": {
        "status204": {
          "description": "Successfully deleted."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "add_permission": {
      "summary": "Adds permission to a LoRa network set.",
      "description": "Adds permission to allow another operator to use the network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "operator_id": {
          "description": "ID of the operator to be added to the list of allowed operators."
        }
      },
      "responses": {
        "status200": {
          "description": "Permission added to the network set."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "revoke_permission": {
      "summary": "Revokes a permission from a LoRa network set.",
      "description": "Revokes a permission and removes an operator from the list of allowed operators in the network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "operator_id": {
          "description": "ID of the operator to be removed from the list of allowed operators."
        }
      },
      "responses": {
        "status200": {
          "description": "Permission revoked from the network set."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "put_tags": {
      "summary": "Bulk Insert or Update LoRa network set tags.",
      "description": "Inserts/updates tags for the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "tags": {
          "description": "Array of tags to be inserted/updated."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa network set's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "delete_tag": {
      "summary": "Delete LoRa network set tag.",
      "description": "Deletes a tag from the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "tag_name": {
          "description": "Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
        }
      },
      "responses": {
        "status204": {
          "description": "Deletion of specified tag complete."
        },
        "status404": {
          "description": "The specified LoRa network set or the tag does not exist."
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa network sets.",
      "description": "Manage LoRa network sets."
    }
  },
  "bills": {
    "get_billing_history": {
      "get": {
        "summary": "Get billing history.",
        "description": "Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_latest_billing": {
      "get": {
        "summary": "Get latest bill.",
        "description": "Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_latest_billing": {
      "post": {
        "summary": "Export latest billing CSV file to S3.",
        "description": "Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_billing": {
      "get": {
        "summary": "Get bill.",
        "description": "Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_billing_per_day": {
      "get": {
        "summary": "Get bill per day.",
        "description": "Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_billing": {
      "post": {
        "summary": "Output billing CSV file to S3.",
        "description": "Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export billing info.",
      "description": "Show billing info for specified period, or export the billing info to a file"
    }
  },
  "payment": {
    "list_coupons": {
      "get": {
        "summary": "List coupons.",
        "description": "Returns a list of currently registered coupons.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_coupon": {
      "post": {
        "summary": "Register Coupon.",
        "description": "Registers a coupon.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_payment_transaction": {
      "get": {
        "summary": "Get payment transaction result.",
        "description": "Returns result of a payment transaction.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_payment_method": {
      "get": {
        "summary": "Get payment method information",
        "description": "Returns current payment methods. Detailed information is included in the properties.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "activate_payment_method": {
      "post": {
        "summary": "Activate payment method.",
        "description": "Activates a current payment method that has an error.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_webpay_payment_method": {
      "post": {
        "summary": "Register credit card information for WebPay.",
        "description": "Registers credit card information for WebPay payments.",
        "parameters": {
          "creditCard": {
            "description": "creditCard"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_payment_statements": {
      "get": {
        "summary": "List payment statements.",
        "description": "List payment statements."
      }
    },
    "export_payment_statement": {
      "post": {
        "summary": "Export payment statement.",
        "description": "Export payment statement."
      }
    },
    "payer_information": {
      "get": {
        "summary": "Export payer information.",
        "description": "Export payer information."
      },
      "post": {
        "summary": "Register payer information.",
        "description": "Register payer information.",
        "parameters": {
          "req": {
            "description": "Payer information to be registered in the accounting specification"
          }
        }
      },
      "cli": {
        "summary": "Get or edit payer information.",
        "description": "Get or edit payer information."
      }
    }
  },
  "payment_history": {
    "cli": {
      "summary": "List payment history.",
      "description": "List payment history."
    }
  },
  "payment_methods": {
    "cli": {
      "summary": "Create or update payment methods.",
      "description": "Create or update payment methods."
    },
    "webpay": {
      "cli": {
        "summary": "Create or update WebPay payment method.",
        "description": "Create or update WebPay payment method."
      }
    }
  },
  "payment_statements": {
    "cli": {
        "summary": "List or export payment statements.",
        "description": "List or export payment statements."
    }
  },
  "event_handlers": {
    "list_event_handlers": {
      "get": {
        "summary": "List Event Handlers.",
        "description": "Returns a list of event handlers.",
        "parameters": {
          "target": {
            "description": "target"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_event_handler": {
      "post": {
        "summary": "Create Event Handler.",
        "description": "Creates a new event handler. Please see also https://dev.soracom.io/en/docs/event_handler/",
        "parameters": {
          "req": {
            "description": "event handler settings"
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "list_event_handlers_by_subscriber": {
      "get": {
        "summary": "List Event Handlers related to Subscriber.",
        "description": "Returns a list of event handlers related to the specified IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_event_handler": {
      "get": {
        "summary": "Get Event Handler.",
        "description": "Returns information about the specified event handler.",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_event_handler": {
      "put": {
        "summary": "Update Event Handler.",
        "description": "Updates the specified event handler. Please see also https://dev.soracom.io/en/docs/event_handler/",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          },
          "event_handler_model": {
            "description": "event handler settings"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_event_handler": {
      "delete": {
        "summary": "Delete Event Handler.",
        "description": "Deletes the specified event handler.",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status204": {
            "description": "OK."
          },
          "status404": {
            "description": "EventHandler not found."
          }
        }
      }
    },
    "set_ignore_event_handler": {
      "post": {
        "summary": "Ignore Event Handler.",
        "description": "Adds a setting for ignoring the specified event handler of the specified IMSI."
      }
    },
    "delete_ignore_event_handler": {
      "delete": {
        "summary": "Delete Ignore Event Handler.",
        "description": "Deletes the setting for ignoring the specified event handler of the specified IMSI."
      }
    },
    "cli": {
      "summary": "List, create, update or delete event handlers.",
      "description": "List, create, update or delete event handlers."
    }
  },
  "files":{
    "get_exported": {
      "get": {
        "summary": "Get an exported file.",
        "description": "Get an exported file. The `url` field in the response will contain a URL to download the exported file."
      }
    },
    "cli": {
      "summary": "Get an exported file.",
      "description": "Get an exported file."
    }
  },
  "orders": {
    "list_orders": {
      "get": {
        "summary": "List confirmed orders.",
        "description": "Returns a list of confirmed orders.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_quotation": {
      "post": {
        "summary": "Create Quotation.",
        "description": "Creates a new order quotation. If the orderId is put in /confirm, the order is complete.",
        "parameters": {
          "request": {
            "description": "Order item list and shipping address ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_order": {
      "get": {
        "summary": "Get confirmed order.",
        "description": "Returns a confirmed order.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cancel_order": {
      "put": {
        "summary": "Cancel order.",
        "description": "Cancels an order. If the order has already been dispatched, an error is returned.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "confirm_order": {
      "put": {
        "summary": "Confirm order.",
        "description": "Performs a credit limit and confirms the order if no problems are encountered.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_ordered_sim": {
      "post": {
        "summary": "Register subscribers for operator.",
        "description": "Registers the ordered SIM with the operator.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_ordered_subscriber": {
      "get": {
        "summary": "List ordered subscribers.",
        "description": "List ordered subscribers",
        "request": {
          "limit": {
            "description": "Max number of subscribers in a response."
          },
          "last_evaluated_key": {
            "description": "Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key."
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_products": {
      "get": {
        "summary": "List products.",
        "description": "Returns a list of products.",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create or cancel orders.",
      "description": "List, create or cancel orders."
    }
  },
  "stats": {
    "get_air_stats": {
      "get": {
        "summary": "Get Air Usage Report of Subscriber.",
        "description": "Retrieves the usage report for the subscriber specified by the IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "Start time in unixtime for the aggregate data."
          },
          "to": {
            "description": "End time in unixtime for the aggregate data."
          },
          "period": {
            "description": "Units of aggregate data. For minutes, the interval is around 5 minutes."
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_beam_stats": {
      "get": {
        "summary": "Get Beam Usage Report of Subscriber.",
        "description": "Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "Start time in unixtime for the aggregate data."
          },
          "to": {
            "description": "End time in unixtime for the aggregate data."
          },
          "period": {
            "description": "Units of aggregate data. For minutes, the interval is around 5 minutes."
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_air_stats": {
      "post": {
        "summary": "Export Air Usage Report of All Subscribers.",
        "description": "Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.",
        "parameters": {
          "operator_id": {
            "description": "operator_id"
          },
          "request": {
            "description": "export time period"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_beam_stats": {
      "post": {
        "summary": "Export Beam Usage Report of All Subscribers.",
        "description": "Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.",
        "parameters": {
          "operator_id": {
            "description": "operator ID"
          },
          "request": {
            "description": "export time period"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export statistics.",
      "description": "Show or export statistics."
    },
    "air": {
      "cli": {
        "summary": "Show or export Air statistics.",
        "description": "Show or export Air statistics."
      }
    },
    "beam": {
      "cli": {
        "summary": "Show or export Beam statistics.",
        "description": "Show or export Beam statistics."
      }
    }
  },
  "groups": {
    "list_groups": {
      "get": {
        "summary": "List Groups.",
        "description": "Returns a list of groups.",
        "parameters": {
          "tag_name": {
            "description": "Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required."
          },
          "tag_value": {
            "description": "Tag value of the groups."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of groups."
          }
        }
      }
    },
    "create_group": {
      "post": {
        "summary": "Create Group.",
        "description": "Create a new group.",
        "parameters": {
          "tags": {
            "description": "Tags for group to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_group": {
      "get": {
        "summary": "Get Group.",
        "description": "Returns the group specified by the group ID.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          }
        },
        "responses": {
          "status200": {
            "description": "The specified group."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "delete_group": {
      "delete": {
        "summary": "Delete Group.",
        "description": "Deletes the specified group by group ID",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified group complete."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "list_subscribers_in_group": {
      "get": {
        "summary": "List Subscribers in a group.",
        "description": "Returns a list of subscribers that belong to the specified group by group ID.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward."
          }
        },
        "responses": {
          "status200": {
            "description": "Target group ID"
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "put_configuration_parameters": {
      "put": {
        "summary": "Update Group Configuration Parameters.",
        "description": "Adds/updates parameters for the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group."
          },
          "namespace": {
            "description": "Target configuration."
          },
          "parameters": {
            "description": "Array of values for target object to be updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The group after the update."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "delete_configuration_parameter": {
      "delete": {
        "summary": "Delete Group Configuration Parameters.",
        "description": "Delete parameters for the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group."
          },
          "namespace": {
            "description": "Namespace of target parameters."
          },
          "name": {
            "description": "Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "The parameter was successfully deleted."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "put_group_tags": {
      "put": {
        "summary": "Update Group Tags.",
        "description": "Adds/updates tags of specified configuration group.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "tags": {
            "description": "Array of values for tags to be updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "delete_group_tag": {
      "delete": {
        "summary": "Delete Group Tag.",
        "description": "Deletes tag from the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "tag_name": {
            "description": "Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "Tag deletion complete."
          },
          "status404": {
            "description": "The specified subscriber or the tag does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete groups.",
      "description": "List, create, update or delete groups."
    }
  },
  "virtual_private_gateway": {
    "list_virtual_private_gateways": {
      "get": {
        "summary": "List Virtual Private Gateways.",
        "description": "Returns a list of VPGs.",
        "parameters": {
          "tag_name": {
            "description": "Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required."
          },
          "tag_value": {
            "description": "Tag value of the VPGs."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward."
          }
        },
        "responses": {
          "status200": {
            "description": "List of VPGs."
          }
        }
      }
    },
    "create_virtual_private_gateway": {
      "post": {
        "summary": "Create Virtual Private Gateway.",
        "description": "Create new VPG.",
        "parameters": {
          "create_virtual_private_gateway_request": {
            "description": "Request containing information for the new VPG to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_virtual_private_gateway": {
      "get": {
        "summary": "Get Virtual Private Gateway.",
        "description": "Retrieves information about the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "The specified VPG."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "terminate_virtual_private_gateway": {
      "post": {
        "summary": "Terminate Virtual Private Gateway.",
        "description": "Terminates the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Termination of specified VPG started."
          },
          "status400": {
            "description": "There is a reason why the specified VPG cannot be terminated."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "open_gate": {
      "post": {
        "summary": "Open SORACOM Gate.",
        "description": "Open SORACOM Gate on the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "SORACOM Gate is successfully opened on the VPG."
          },
          "status400": {
            "description": "Client side error."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "close_gate": {
      "post": {
        "summary": "Close SORACOM Gate.",
        "description": "Close SORACOM Gate on the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "SORACOM Gate is successfully closed on the VPG."
          },
          "status400": {
            "description": "Client side error."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "list_virtual_private_gateway_peers": {
      "get": {
        "summary": "List VPG Gate peers",
        "description": "List Gate peers registered in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "List of peers registered in the VPG."
          },
          "status400": {
            "description": "Client side error in the request."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "register_virtual_private_gateway_peer": {
      "post": {
        "summary": "Register VPG Gate peer",
        "description": "Register a host as a gate peer in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Gate peer is successfully registered."
          },
          "status400": {
            "description": "Client side error in the request."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "unregister_virtual_private_gateway_peer": {
      "delete": {
        "summary": "Unregister VPG gate peer",
        "description": "Unregister a gate peer from the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "host_id": {
            "description": "ID of the target node."
          }
        },
        "responses": {
          "status204": {
            "description": "Successfully deregistered the Gate peer."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "list_virtual_private_gateway_ip_address_map_entries": {
      "get": {
        "summary": "List VPG IP address map entries",
        "description": "Describes the list of IP addresse map entries in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Successfully fetched the list of IP address map entries."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "put_virtual_private_gateway_ip_address_map_entry": {
      "post": {
        "summary": "Put an entry in VPG IP address map",
        "description": "Puts an entry in VPG IP address map.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Successfully put an entry for the specified key and IP address."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "delete_virtual_private_gateway_ip_address_map_entry": {
      "delete": {
        "summary": "Delete VPG IP address map entry",
        "description": "Deletes an entry in VPG IP address map.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "key": {
            "description": "Target key to remove."
          }
        },
        "responses": {
          "status204": {
            "description": "Successfully deleted the entry from the VPG IP address map."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "create_vpc_peering_connection": {
      "post": {
        "summary": "Create VPC Peering Connection",
        "description": "Creates a VPC peering connection for the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "vpc_peering_connection": {
            "description": "VPC peering connection to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "The created VPC peering connection."
          },
          "status404": {
            "description": "The specified VPC peering connection does not exist."
          }
        }
      }
    },
    "delete_vpc_peering_connection": {
      "delete": {
        "summary": "Delete VPC Peering Connection.",
        "description": "Deletes the specified VPC peering connection.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "pcx_id": {
            "description": "VPC peering connection ID to be deleted."
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified VPC peering connection complete."
          },
          "status404": {
            "description": "The specified VPC peering connection does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete VPGs.",
      "description": "List, create, update or delete VPGs (Virtual Private Gateways)."
    }
  },
  "logs": {
    "get_logs": {
      "get": {
        "summary": "Get Logs.",
        "description": "Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "resource_type": {
            "description": "Type of the target resource to query log entries."
          },
          "resource_id": {
            "description": "Identity of the target resource to query log entries."
          },
          "service": {
            "description": "Service name to filter log entries."
          },
          "from": {
            "description": "Start time for the log search range (unixtime)."
          },
          "to": {
            "description": "End time for the log search range (unixtime)."
          },
          "limit": {
            "description": "Maximum number of log entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of log entries."
          }
        }
      }
    },
    "cli": {
      "summary": "List logs.",
      "description": "List logs."
    }
  },
  "completion": {
    "cli": {
      "summary": "Generate script for bash completion."
    }
  },
  "configure": {
    "cli": {
      "summary": "Show, create or update configurations.",
      "description": "Show, create or update configurations.",
      "profile": {
        "prompt": "--- SORACOM CLI setup ---\nThis will create a directory %s if it does not exist yet and place '%s.json' in it.",
        "coverage_type": {
          "prompt": "\n\nPlease select which coverage type to use.\n\n1. Global\n2. Japan\n\n",
          "select": "select (1-2) > "
        },
        "auth": {
          "prompt": "\n\nPlease select which authentication method to use.\n\n1. Input AuthKeyId and AuthKey * Recommended * \n2. Input Operator credentials (Operator Email and Password)\n3. Input SAM credentials (OperatorId, User name and Password)\n\n",
          "select": "select (1-3) > "
        },
        "overwrite": "\nProfile %s already exists. Overwrite it? (Y/n) "
      }
    },
    "get": {
      "cli": {
        "summary": "Show specified profile configurations.",
        "description": "Show specified profile configurations"
      }
    }
  },
  "coupons": {
    "cli": {
      "summary": "List or register coupons.",
      "description": "List or register coupons."
    }
  },
  "data": {
    "cli": {
      "summary": "Get stored data from subscribers.",
      "description": "Get stored data from subscribers."
    }
  },
  "products": {
    "cli": {
      "summary": "List products.",
      "description": "List products."
    }
  },
  "version": {
    "cli": {
      "summary": "Show version info.",
      "description": "Show version info."
    }
  },
  "cli": {
    "common_params": {
      "body": {
        "short_help": "JSON string or @filename for API request body."
      }
    }
  }
}
