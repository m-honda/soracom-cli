{
  "auth": {
    "auth": {
      "post": {
        "summary": "进行API联结认证。",
        "description": "进行API联结认证。以根账户认证时，请包含email和password，以认证密钥认证时，请包含authKeyID和authKey，以SAM用户认证时，请包含operatorId、username和password进行请求。若认证成功，会返回API Key和API口令，之后认证需要请求的时候，请将该API Key和API口令赋予头文件后再实行请求。",
        "parameters": {
          "auth": {
            "description": "認証请求"
          }
        },
        "responses": {
          "status200": {
            "description": "认证成功"
          },
          "status401": {
            "description": "认证失败"
          }
        },
        "cli": {
          "summary": "Performs authentication and issue an API Key and an API Token if successful.",
          "description": "Performs authentication to access to the SORACOM API.\nTo perform authentication by a root account, specify `--email` and `--password`.\nTo perform authentication by an AuthKey, specify `--auth-key-id` and `--auth-key`.\nTo perform authentication by a SAM user, specify `--operator-id`, `--user-name` and `--password`. An API Key and an API Token will be shown if successful."
        }
      }
    },
    "issue_password_reset_token": {
      "post": {
        "summary": "它会发出密码重置令牌。",
        "description": "生成为了重设密码用的动态口令，送信至Operator的邮箱地址。获得邮件中记载的口令，调用/v1/auth/password_reset_token/verify API ，设定新密码。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "邮箱地址不正确。"
          }
        },
        "cli": {
          "summary": "Issues a password reset token for the operator.",
          "description": "Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, run 'soracom auth verify-password-reset-token' with the token to update operator's password."
        }
      }
    },
    "verify_password_reset_token": {
      "post": {
        "summary": "验证重设密码用的口令，若验证成功，则更新Operator的密码。",
        "description": "验证重设密码用的口令，若验证成功，则更新Operator的密码。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "指定了不正当的口令。"
          },
          "status404": {
            "description": "口令的有效期已过。"
          }
        },
        "cli": {
          "summary": "Verifies the password reset token and updates password.",
          "description": "Updates the operator's password if the password reset token is verified."
        }
      }
    }
  },
  "credentials": {
    "list_credentials": {
      "get": {
        "summary": "返回认证信息一览",
        "description": "返回认证信息一览",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_credential": {
      "post": {
        "summary": "新创建认证情报。",
        "description": "新创建认证信息。",
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "update_credential": {
      "put": {
        "summary": "更新认证信息。",
        "description": "更新认证信息。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "请求错误，或指定令牌已经失效（若为后者，需要再次通过/auth API认证）"
          }
        }
      }
    },
    "delete_credential": {
      "delete": {
        "summary": "删除认证信息。",
        "description": "删除认证信息。"
      }
    },
    "cli": {
      "summary": "List, create, update or delete credentials sets.",
      "description": "List, create, update or delete credentials sets."
    }
  },
  "operator": {
    "create_operator": {
      "post": {
        "summary": "Create Operator",
        "description": "请求Operator新登录。向参数指定的邮箱地址，发送Operator登录确认用的含有动态口令的邮件。",
        "responses": {
          "status200": {
            "description": "Operator被创建"
          },
          "status400": {
            "description": "邮箱地址已经被登录过、或者密码格式错误"
          }
        }
      }
    },
    "issue_email_change_token": {
      "post": {
        "summary": "Issue Email Change Token",
        "description": "以邮件形式发送更改邮箱地址的动态口令。"
      }
    },
    "verify_email_change_token": {
      "post": {
        "summary": "Verify Email Change Token",
        "description": "确认更改邮箱地址的口令，更改邮箱地址。"
      }
    },
    "verify_operator": {
      "post": {
        "summary": "Verify Operator",
        "description": "进行Operator登录确认。将邮件发来的确认用动态口令包含在参数中进行调用。",
        "responses": {
          "status200": {
            "description": "成功登录"
          },
          "status400": {
            "description": "动态口令错误"
          },
          "status404": {
            "description": "动态口令过期"
          }
        }
      }
    },
    "get_operator": {
      "get": {
        "summary": "Get Operator",
        "description": "返回Operator的信息。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid Operator Id"
          }
        }
      }
    },
    "list_operator_auth_keys": {
      "get": {
        "summary": "List Operator AuthKeys",
        "description": "返回Operator的AuthKey一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "generate_operator_auth_key": {
      "post": {
        "summary": "Generate Operator AuthKey",
        "description": "创建Operator的AuthKey。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_operator_auth_key": {
      "delete": {
        "summary": "Delete Operator AuthKey",
        "description": "删除Operator的AuthKey。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_operator_password": {
      "post": {
        "summary": "Update Operator Password",
        "description": "更新Operator的密码。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid password."
          }
        }
      }
    },
    "generate_support_token": {
      "post": {
        "summary": "Generate Token for Support Console",
        "description": "返回连接到Support画面的口令。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "Invalid Operator Id"
          },
          "status403": {
            "description": "Invalid token."
          }
        }
      }
    },
    "generate_auth_token": {
      "post": {
        "summary": "Generate Authentication Token",
        "description": "发行新的API口令。将现在的API口令输入头文件中进行请求，则会得到含有新API口令的应答。之后再进行请求时就可以使用新API口令。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status400": {
            "description": "请求错误，或指定令牌已经失效（若为后者，需要再次通过/auth API认证）"
          }
        }
      }
    },
    "cli": {
      "summary": "Manage operators.",
      "description": "Manage operators."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete operator's AuthKeys.",
        "description": "List, create or delete operator's AuthKeys."
      }
    }
  },
  "roles": {
    "list_roles": {
      "get": {
        "summary": "List Roles",
        "description": "返回Role一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_role": {
      "get": {
        "summary": "Get Role",
        "description": "获得Role。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_role": {
      "post": {
        "summary": "Create Role",
        "description": "新追加Role。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_role": {
      "put": {
        "summary": "Update Role",
        "description": "编辑Role。"
      }
    },
    "delete_role": {
      "delete": {
        "summary": "Delete Role",
        "description": "删除Role。"
      }
    },
    "list_role_attached_users": {
      "get": {
        "summary": "List Role Attached Users",
        "description": "获得与Role联结的用户一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_user_roles": {
      "get": {
        "summary": "List User Roles",
        "description": "获得用户的Role一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "attach_role": {
      "post": {
        "summary": "Attach Role to User",
        "description": "在用户上附上Role。"
      }
    },
    "detach_role": {
      "delete": {
        "summary": "Detach Role from User",
        "description": "将Role从用户中分离开。"
      }
    },
    "cli": {
      "summary": "List, create, update or delete roles.",
      "description": "List, create, update or delete roles."
    }
  },
  "shipping_addresses": {
    "list_shipping_addresses": {
      "get": {
        "summary": "List shipping addresses",
        "description": "返回商品的派送地址一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_shipping_address": {
      "post": {
        "summary": "Create shipping address",
        "description": "新登录商品的派送地址。",
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status201": {
            "description": "shippingAddreddId"
          }
        }
      }
    },
    "get_shipping_address": {
      "get": {
        "summary": "Get shipping address",
        "description": "返回商品派送地址。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_shipping_address": {
      "put": {
        "summary": "Update shipping address",
        "description": "更新商品派送地址。"
      }
    },
    "delete_shipping_address": {
      "delete": {
        "summary": "Delete shipping address",
        "description": "删除商品派送地址。"
      }
    },
    "cli": {
      "summary": "List, create, update or delete shipping addresses.",
      "description": "List, create, update or delete shipping addresses."
    }
  },
  "users": {
    "list_users": {
      "get": {
        "summary": "List Users",
        "description": "返回SAM用户一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_user": {
      "get": {
        "summary": "Get User",
        "description": "返回SAM用户。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_user": {
      "post": {
        "summary": "Create User",
        "description": "新追加SAM用户。"
      }
    },
    "update_user": {
      "put": {
        "summary": "Update User",
        "description": "更新SAM用户。",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "delete_user": {
      "delete": {
        "summary": "Delete User",
        "description": "删除SAM用户。",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "list_user_auth_keys": {
      "get": {
        "summary": "List User AuthKeys",
        "description": "返回SAM用户的AuthKey一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "generate_user_auth_key": {
      "post": {
        "summary": "Generate AuthKey",
        "description": "创建SAM用户的AuthKey一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_user_auth_key": {
      "get": {
        "summary": "Get AuthKey",
        "description": "返回SAM用户的AuthKey一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_user_auth_key": {
      "delete": {
        "summary": "Delete User AuthKey",
        "description": "删除SAM用户的AuthKey一览。",
        "responses": {
          "status404": {
            "description": "AuthKey not found."
          }
        }
      }
    },
    "has_user_password": {
      "get": {
        "summary": "Has User Password",
        "description": "获得关于SAM用户的密码是否被搜索成功的信息",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_user_password": {
      "post": {
        "summary": "Create Password",
        "description": "创建SAM用户的密码。"
      }
    },
    "update_user_password": {
      "put": {
        "summary": "Update Password",
        "description": "更新SAM用户的密码。"
      }
    },
    "delete_user_password": {
      "delete": {
        "summary": "Delete Password",
        "description": "删除用户的密码。",
        "responses": {
          "status404": {
            "description": "Password registration is required."
          }
        }
      }
    },
    "get_user_permission": {
      "get": {
        "summary": "Get User Permission",
        "description": "获得SAM用户的权限设定。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_user_permission": {
      "put": {
        "summary": "Update Permission to User",
        "description": "更新SAM用户的权限。"
      }
    },
    "cli": {
      "summary": "Manage SAM users.",
      "description": "Manage SAM users."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete SAM user's AuthKeys.",
        "description": "List, create or delete SAM user's AuthKeys."
      }
    },
    "password": {
      "cli": {
        "summary": "Create, update or delete SAM user's password.",
        "description": "Create, update or delete SAM user's password."
      }
    },
    "permissions": {
      "cli": {
        "summary": "Show, create and update SAM user's permission.",
        "description": "Show, create and update SAM user's permission."
      }
    }
  },
  "subscribers": {
    "list_subscribers": {
      "get": {
        "summary": "List Subscribers",
        "description": "返回符合条件的Subscriber的列表。如果Subscriber的总数超过1页，则在应答中，将联结到下一页的URL包含在`Link`头文件中返回。",
        "parameters": {
          "tag_name": {
            "description": "设定为检索对象的标签名（完全相同）。"
          },
          "tag_value": {
            "description": "设定为检索对象的标签检索文字列。指定为`tag_name`的情况则为必须。"
          },
          "tag_value_match_mode": {
            "description": "标签的检索条件。"
          },
          "status_filter": {
            "description": "设为检索对象的status。用`|`隔开可以进行多个指定。可以指定的值如下：`active`, `inactive`, `ready`, `instock`, `shipped`, `suspended`, `terminated`"
          },
          "speed_class_filter": {
            "description": "设为检索对象的速度级别。用`|`隔开可以进行多个指定。可以指定的值如下：`s1.minimum`, `s1.slow`, `s1.standard`, `s1.fast`"
          },
          "serial_number_filter": {
            "description": "Serial number for filtering the search. Can specify multiple values delimited by `|`. Returns subscribers with serial number starting with the specified value(s)."
          },
          "limit": {
            "description": "能获得的Subscriber的上限"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后的Subscriber的IMSI。通过指定该参数，可以获得下一个Subscriber之后的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "A list of subscibers"
          }
        }
      }
    },
    "register_subscriber": {
      "post": {
        "summary": "Register Subscriber",
        "description": "登录Subscriber",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "subscriber": {
            "description": "subscriber"
          }
        },
        "responses": {
          "status201": {
            "description": "Subscriber登录完毕"
          }
        }
      }
    },
    "get_subscriber": {
      "get": {
        "summary": "Get Subscriber",
        "description": "返回指定的Subscriber的信息。",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "指定的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "update_speedclass": {
      "post": {
        "summary": "Update Subscriber speed class",
        "description": "更改指定的Subscriber的速度等级",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "delete_session": {
      "post": {
        "summary": "Delete session",
        "description": "Deletes session for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "activate_subscriber": {
      "post": {
        "summary": "Activate Subscriber",
        "description": "将指定的Subscriber的状态有效化",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "deactivate_subscriber": {
      "post": {
        "summary": "Deactivate Subscriber",
        "description": "将指定的Subscriber无效化",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "terminate_subscriber": {
      "post": {
        "summary": "Terminate Subscriber",
        "description": "将指定的Subscriber进行Terminate",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "suspend_subscriber": {
      "post": {
        "summary": "Suspend Subscriber",
        "description": "将指定的Subscriber进行Suspend",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "enable_termination": {
      "post": {
        "summary": "Enable Termination of Subscriber",
        "description": "将指定的Subscriber设定为可以Terminate",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "disable_termination": {
      "post": {
        "summary": "Disable Termination of Subscriber",
        "description": "将指定的Subscriber设定为不可Terminate",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "set_expirytime": {
      "post": {
        "summary": "Update Expiry Time of Subscriber",
        "description": "更新指定的Subscriber的有效期",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "request": {
            "description": "更新后的有效期（unixtime：毫秒单位）"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "unset_expirytime": {
      "post": {
        "summary": "Delete Expiry Time of Subscriber",
        "description": "删除指定的Subscriber的有效期，更改为无限期",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status204": {
            "description": "该Subscriber的有效期更改完毕为无限期"
          },
          "status404": {
            "description": "指定的Subscriber不存在，或Subscriber没有有效期"
          }
        }
      }
    },
    "set_group": {
      "post": {
        "summary": "Set Group to Subscriber",
        "description": "将指定的Subscriber的所属Group进行指定或替换更改",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "group": {
            "description": "Group（只需含有ID即可）"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "unset_group": {
      "post": {
        "summary": "Unset Group to Subscriber",
        "description": "将指定的Subscriber的Group指定解除",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在，或Subscriber不属于Group"
          }
        }
      }
    },
    "set_imei_lock": {
      "post": {
        "summary": "Set IMEI lock configuration for Subscriber.",
        "description": "Set IMEI that the subscriber should be locked to.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "imeiLock": {
            "description": "IMEI lock configuration for the subscriber. (IMEI can be left black for locking to the current IMEI of an online subscriber.)"
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status400": {
            "description": "Invalid IMEI string or subscriber is offline and IMEI not specified."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_imei_lock": {
      "post": {
        "summary": "Unset IMEI lock configuration for Subscriber.",
        "description": "Unset IMEI lock configuration for the subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "list_session_events": {
      "get": {
        "summary": "List Session Events",
        "description": "返回指定的Subscriber的编号创建、更改、删除的事件履历。如果事件总数超过1页，则在应答中，将联结到下一页的URL包含在`Link`头文件中返回。",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "from": {
            "description": "事件检索范围的开始时刻 (unixtime)"
          },
          "to": {
            "description": "事件检索范围的终止时刻 (unixtime)"
          },
          "limit": {
            "description": "获得的事件数的上限"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后事件的时间戳。通过指定该参数，可以获得下一个事件之后的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "A list of session events"
          }
        }
      }
    },
    "put_subscriber_tags": {
      "put": {
        "summary": "Bulk Insert or Update Subscriber Tags",
        "description": "追加、更新指定的Subscriber的标签",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "tags": {
            "description": "追加、更新对象标签的排列"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "delete_subscriber_tag": {
      "delete": {
        "summary": "Delete Subscriber Tag",
        "description": "删除指定的Subscriber的标签",
        "parameters": {
          "imsi": {
            "description": "对象的Subscriber的IMSI"
          },
          "tag_name": {
            "description": "删除对象的标签名（由于是URL的Path的一部分，所以进行百分号编码。如果是JavaScript的话则指定encodeURIComponent()过的项目）"
          }
        },
        "responses": {
          "status204": {
            "description": "对象标签删除完毕"
          },
          "status404": {
            "description": "指定的Subscriber或者标签不存在"
          }
        }
      }
    },
    "issue_subscriber_transfer_token": {
      "post": {
        "summary": "Issue Subscribers Transfer Token",
        "description": "将Subscriber的Operator间的移交用口令，通过邮件传送给移交处的Operator。",
        "parameters": {
          "request": {
            "description": "传送目标 email address, Operator ID、转移对象IMSI"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "verify_subscriber_transfer_token": {
      "post": {
        "summary": "Verify Subscriber Transfer Token",
        "description": "确认Subscriber移交用的口令，实行移交。用移交处的Operator调用该API。",
        "parameters": {
          "request": {
            "description": "通過 email Subscriber Transfer Token 發送"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_subscriber_transfer_token": {
      "delete": {
        "summary": "Delete Subscribers Transfer Token",
        "description": "删除Subscriber的Operator间移交口令，取消移交。",
        "parameters": {
          "token": {
            "description": "token"
          }
        },
        "responses": {
          "status204": {
            "description": "实行删除"
          },
          "status404": {
            "description": "口令不存在"
          }
        }
      }
    },
    "get_data_from_subscriber": {
      "get": {
        "summary": "Get data sent from a subscriber.",
        "description": "Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber that generated data entries."
          },
          "from": {
            "description": "Start time for the data entries search range (unixtime in milliseconds)."
          },
          "to": {
            "description": "End time for the data entries search range (unixtime in milliseconds)."
          },
          "sort": {
            "description": "Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). Default "
          },
          "limit": {
            "description": "Maximum number of data entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of data entries."
          }
        }
      }
    },
    "cli": {
      "summary": "Manage subscribers.",
      "description": "Manage subscribers."
    }
  },
  "lora_devices": {
    "list_lora_devices": {
      "get": {
        "summary": "List LoRa devices",
        "description": "返回符合条件的LoRa device的列表。如果LoRa device的总数超过1页，则在应答中，将联结到下一页的URL包含在`Link`头文件中返回。",
        "parameters": {
          "tag_name": {
            "description": "设定为检索对象的标签名（完全相同）。"
          },
          "tag_value": {
            "description": "设定为检索对象的标签检索文字列。指定为`tag_name`的情况则为必须。"
          },
          "tag_value_match_mode": {
            "description": "标签的检索条件。"
          },
          "limit": {
            "description": "能获得的LoRa device的上限"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后的LoRa device的Device ID。通过指定该参数，可以获得下一个LoRa device之后的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "A list of subscibers"
          }
        }
      }
    },
    "register_lora_device": {
      "post": {
        "summary": "Register LoRa device",
        "description": "登录LoRa device",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          },
          "lora_device": {
            "description": "LoRa device"
          }
        },
        "responses": {
          "status201": {
            "description": "LoRa device登录完毕"
          }
        }
      }
    },
    "get_lora_device": {
      "get": {
        "summary": "Get LoRa device",
        "description": "返回指定的LoRa device的信息。",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "指定的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "get_data_from_lora_device": {
      "get": {
        "summary": "Get data sent from a LoRa device.",
        "description": "Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "device_id": {
            "description": "ID of the target subscriber that generated data entries."
          },
          "from": {
            "description": "Start time for the data entries search range (unixtime in milliseconds)."
          },
          "to": {
            "description": "End time for the data entries search range (unixtime in milliseconds)."
          },
          "sort": {
            "description": "Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). Default "
          },
          "limit": {
            "description": "Maximum number of data entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The value of `time` in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of data entries."
          }
        }
      }
    },
    "send_data_to_lora_device": {
      "post": {
        "summary": "Send data to a LoRa device.",
        "description": "Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.",
        "parameters": {
          "device_id": {
            "description": "ID of the recipient device."
          },
          "data": {
            "description": "Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string)."
          }
        },
        "responses": {
          "status204": {
            "description": "Data has been received and sent to the LoRa network server for the recipient device to retrieve."
          },
          "status404": {
            "description": "No such device found."
          }
        }
      }
    },
    "terminate_lora_device": {
      "post": {
        "summary": "Terminate LoRa device",
        "description": "将指定的LoRa device进行Terminate",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "enable_termination": {
      "post": {
        "summary": "Enable Termination of LoRa device",
        "description": "将指定的LoRa device设定为可以Terminate",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "disable_termination": {
      "post": {
        "summary": "Disable Termination of LoRa device",
        "description": "将指定的LoRa device设定为不可Terminate",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "set_group": {
      "post": {
        "summary": "Set Group of LoRa device",
        "description": "将指定的LoRa device的所属Group进行指定或替换更改",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          },
          "group": {
            "description": "Group（只需含有ID即可）"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "unset_group": {
      "post": {
        "summary": "Unset Group of LoRa device",
        "description": "将指定的LoRa device的Group指定解除",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在，或LoRa device不属于Group"
          }
        }
      }
    },
    "put_lora_device_tags": {
      "put": {
        "summary": "Bulk Insert or Update LoRa device Tags",
        "description": "追加、更新指定的LoRa device的标签",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          },
          "tags": {
            "description": "追加、更新对象标签的排列"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的LoRa device的详细信息"
          },
          "status404": {
            "description": "指定的LoRa device不存在"
          }
        }
      }
    },
    "delete_lora_device_tag": {
      "delete": {
        "summary": "Delete LoRa device Tag",
        "description": "删除指定的LoRa device的标签",
        "parameters": {
          "device_id": {
            "description": "对象的LoRa device的ID"
          },
          "tag_name": {
            "description": "删除对象的标签名（由于是URL的Path的一部分，所以进行百分号编码。如果是JavaScript的话则指定encodeURIComponent()过的项目）"
          }
        },
        "responses": {
          "status204": {
            "description": "对象标签删除完毕"
          },
          "status404": {
            "description": "指定的LoRa device或者标签不存在"
          }
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa devices.",
      "description": "Manage LoRa devices."
    }
  },
  "lora_gateways": {
    "list": {
      "summary": "List LoRa Gateways.",
      "description": "Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "tag_name": {
          "description": "Tag name for filtering the search (exact match)."
        },
        "tag_value": {
          "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
        },
        "tag_value_match_mode": {
          "description": "Tag match mode."
        },
        "limit": {
          "description": "Maximum number of LoRa devices to retrieve."
        },
        "last_evaluated_key": {
          "description": "The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa gateways."
        }
      }
    },
    "get": {
      "summary": "Get LoRa gateway.",
      "description": "Returns information about the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "Gateway ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "terminate": {
      "summary": "Terminate LoRa gateway.",
      "description": "Terminates the specified LoRa gateway",
      "parameters": {
        "gateway_id": {
          "description": "Device ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "enable_termination": {
      "summary": "Enable Termination of LoRa gateway.",
      "description": "Enables termination of specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "disable_termination": {
      "summary": "Disable Termination of LoRa gateway.",
      "description": "Disables termination of specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "set_network_set": {
      "summary": "Set Network Set ID of LoRa gateway.",
      "description": "Sets or overwrites network set ID for the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "ns_id": {
          "description": "LoRa Network Set ID."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa device does not exist."
        }
      }
    },
    "unset_network_set": {
      "summary": "Unset Network Set ID of LoRa gateway.",
      "description": "Unset network set ID of the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "put_tags": {
      "summary": "Bulk Insert or Update LoRa gateway Tags.",
      "description": "Inserts/updates tags for the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "tags": {
          "description": "Array of tags to be inserted/updated."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa gateway's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa gateway does not exist."
        }
      }
    },
    "delete_tag": {
      "summary": "Delete LoRa gateway tag.",
      "description": "Deletes a tag from the specified LoRa gateway.",
      "parameters": {
        "gateway_id": {
          "description": "ID of the target LoRa gateway."
        },
        "tag_name": {
          "description": "Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
        }
      },
      "responses": {
        "status204": {
          "description": "Deletion of specified tag complete."
        },
        "status404": {
          "description": "The specified LoRa gateway or the tag does not exist."
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa gateways.",
      "description": "Manage LoRa gateways."
    }
  },
  "lora_network_sets": {
    "create": {
      "summary": "Create a LoRa network set.",
      "description": "Creates a specified LoRa network set",
      "parameters": {
        "lora_network_set": {
          "description": "Additional metadata such as tags for a LoRa network set to create."
        }
      },
      "responses": {
        "status201": {
          "description": "A LoRa network set was created."
        }
      }
    },
    "list": {
      "summary": "List LoRa Network Sets.",
      "description": "Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "tag_name": {
          "description": "Tag name for filtering the search (exact match)."
        },
        "tag_value": {
          "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
        },
        "tag_value_match_mode": {
          "description": "Tag match mode."
        },
        "limit": {
          "description": "Maximum number of LoRa devices to retrieve."
        },
        "last_evaluated_key": {
          "description": "The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa network sets."
        }
      }
    },
    "get": {
      "summary": "Get LoRa network set.",
      "description": "Returns information about the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa network set's detailed information."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "list_gateways": {
      "summary": "List LoRa Gateways in a Network Set.",
      "description": "Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "limit": {
          "description": "Maximum number of LoRa gateways to retrieve."
        },
        "last_evaluated_key": {
          "description": "The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."
        }
      },
      "responses": {
        "status200": {
          "description": "A list of LoRa gateways."
        },
        "status404": {
          "description": "The specified network set does not exist."
        }
      }
    },
    "delete": {
      "summary": "Delete LoRa network set.",
      "description": "Deletes the specified LoRa network set",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        }
      },
      "responses": {
        "status204": {
          "description": "Successfully deleted."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "add_permission": {
      "summary": "Adds permission to a LoRa network set.",
      "description": "Adds permission to allow another operator to use the network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "operator_id": {
          "description": "ID of the operator to be added to the list of allowed operators."
        }
      },
      "responses": {
        "status200": {
          "description": "Permission added to the network set."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "revoke_permission": {
      "summary": "Revokes a permission from a LoRa network set.",
      "description": "Revokes a permission and removes an operator from the list of allowed operators in the network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "operator_id": {
          "description": "ID of the operator to be removed from the list of allowed operators."
        }
      },
      "responses": {
        "status200": {
          "description": "Permission revoked from the network set."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "put_tags": {
      "summary": "Bulk Insert or Update LoRa network set tags.",
      "description": "Inserts/updates tags for the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "tags": {
          "description": "Array of tags to be inserted/updated."
        }
      },
      "responses": {
        "status200": {
          "description": "The LoRa network set's detailed information after the update."
        },
        "status404": {
          "description": "The specified LoRa network set does not exist."
        }
      }
    },
    "delete_tag": {
      "summary": "Delete LoRa network set tag.",
      "description": "Deletes a tag from the specified LoRa network set.",
      "parameters": {
        "ns_id": {
          "description": "ID of the target LoRa network set."
        },
        "tag_name": {
          "description": "Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
        }
      },
      "responses": {
        "status204": {
          "description": "Deletion of specified tag complete."
        },
        "status404": {
          "description": "The specified LoRa network set or the tag does not exist."
        }
      }
    },
    "cli": {
      "summary": "Manage LoRa network sets.",
      "description": "Manage LoRa network sets."
    }
  },  
  "bills": {
    "get_billing_history": {
      "get": {
        "summary": "Get billing history",
        "description": "返回过去的使用额履历（应用了免费利用范围的折扣后、含税）。该API仅返回进行月结后、确定的使用额。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_latest_billing": {
      "get": {
        "summary": "Get latest bill",
        "description": "返回应用了免费利用范围的折扣后的最近的使用额。该API获得的金额为请求确定前的金额。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_latest_billing": {
      "post": {
        "summary": "Export latest billing CSV file to S3",
        "description": "返回最近一个月的使用额明细。该明细中含有以每日、每个Subscriber、每个收费项目分别计算的使用额。该API获得的金额为请求确定前的金额。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_billing": {
      "get": {
        "summary": "Get bill",
        "description": "返回指定月的使用额履历（应用了免费利用范围的折扣后、含税）。该API仅返回进行月结后、确定的使用额。",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_billing_per_day": {
      "get": {
        "summary": "Get bill per day",
        "description": "返回指定按月、按日计算的使用额明细。该API仅返回确定的使用额。",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_billing": {
      "post": {
        "summary": "Output billing CSV file to S3",
        "description": "返回指定月的使用额明细。该明细中含有以每日、每个Subscriber、每个收费项目分别计算的使用额。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export billing info.",
      "description": "Show billing info for specified period, or export the billing info to a file"
    }
  },
  "payment": {
    "list_coupons": {
      "get": {
        "summary": "List coupons",
        "description": "返回现在被登记中的优惠券一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_coupon": {
      "post": {
        "summary": "Register Coupon",
        "description": "登记优惠券。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_payment_transaction": {
      "get": {
        "summary": "Get payment transaction result",
        "description": "返回收费处理的结果。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_payment_method": {
      "get": {
        "summary": "Get payment method information",
        "description": "返回现在的支付方法。Properties里含有详细信息。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "activate_payment_method": {
      "post": {
        "summary": "Activate payment method",
        "description": "将有误的现在的支付方法有效化。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_webpay_payment_method": {
      "post": {
        "summary": "Register credit card information for WebPay",
        "description": "登记WebPay的支付用卡的信息。",
        "parameters": {
          "creditCard": {
            "description": "creditCard"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_payment_statements": {
      "get": {
        "summary": "List payment statements.",
        "description": "清单付款报表"
      }
    },
    "export_payment_statement": {
      "post": {
        "summary": "Export payment statement.",
        "description": "导出付款报表"
      }
    },
    "payer_information": {
      "get": {
        "summary": "Register payer information.",
        "description": "注册收款人信息"
      },
      "post": {
        "summary": "Register payer information.",
        "description": "Register payer information.",
        "parameters": {
          "req": {
            "description": "在会计规范登记付款人信息"
          }
        }
      },
      "cli": {
        "summary": "Get or edit payer information.",
        "description": "Get or edit payer information."
      }
    }
  },
  "payment_history": {
    "cli": {
      "summary": "List payment history.",
      "description": "List payment history."
    }
  },
  "payment_methods": {
    "cli": {
      "summary": "Create or update payment methods.",
      "description": "Create or update payment methods."
    },
    "webpay": {
      "cli": {
        "summary": "Create or update WebPay payment method.",
        "description": "Create or update WebPay payment method."
      }
    }
  },
  "payment_statements" : {
    "cli": {
      "summary": "List or export payment statements.",
      "description": "List or export payment statements."
    }
  },
  "event_handlers": {
    "list_event_handlers": {
      "get": {
        "summary": "List Event Handlers",
        "description": "返回事件处理程序一览。",
        "parameters": {
          "target": {
            "description": "target"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_event_handler": {
      "post": {
        "summary": "Create Event Handler",
        "description": "新创建事件处理程序; https://dev.soracom.io/en/docs/event_handler/",
        "parameters": {
          "req": {
            "description": "事件处理程序"
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "list_event_handlers_by_subscriber": {
      "get": {
        "summary": "List Event Handlers related to Subscriber",
        "description": "返回联结对象IMSI的事件处理程序列表。",
        "parameters": {
          "imsi": {
            "description": "imsi"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_event_handler": {
      "get": {
        "summary": "Get Event Handler",
        "description": "返回指定事件处理程序的信息。",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "update_event_handler": {
      "put": {
        "summary": "Update Event Handler",
        "description": "更新指定事件处理程序; https://dev.soracom.io/en/docs/event_handler/",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          },
          "event_handler_model": {
            "description": "事件处理程序"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "delete_event_handler": {
      "delete": {
        "summary": "Delete Event Handler",
        "description": "删除指定事件处理程序。",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status204": {
            "description": "OK."
          },
          "status404": {
            "description": "EventHandler not found."
          }
        }
      }
    },
    "set_ignore_event_handler": {
      "post": {
        "summary": "Ignore Event Handler",
        "description": "对指定的IMSI，追加无视指定的事件处理程序的设定"
      }
    },
    "delete_ignore_event_handler": {
      "delete": {
        "summary": "Delete Ignore Event Handler",
        "description": "对指定的IMSI，删除无视指定的事件处理程序的设定"
      }
    },
    "cli": {
      "summary": "List, create, update or delete event handlers.",
      "description": "List, create, update or delete event handlers."
    }
  },
  "files":{
    "get_exported": {
      "get": {
        "summary": "Get an exported file.",
        "description": "Get an exported file. The `url` field in the response will contain a URL to download the exported file."
      }
    },
    "cli": {
      "summary": "Get an exported file.",
      "description": "Get an exported file."
    }
  },
  "orders": {
    "list_orders": {
      "get": {
        "summary": "List confirmed orders.",
        "description": "返回确定订购的订购一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "create_quotation": {
      "post": {
        "summary": "Create Quotation",
        "description": "创建新订购估价单。将orderId PUT至/confirm后，订购完成。",
        "parameters": {
          "request": {
            "description": "Order item list and shipping address ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          },
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_order": {
      "get": {
        "summary": "Get confirmed order.",
        "description": "返回订购完成的订购。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cancel_order": {
      "put": {
        "summary": "Cancel order.",
        "description": "取消订购。若已经发送，则返回错误。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "confirm_order": {
      "put": {
        "summary": "Confirm order.",
        "description": "实施与贷，若没有问题，则确认订购。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "register_ordered_sim": {
      "post": {
        "summary": "Register subscribers for operator.",
        "description": "将订购的SIM登记到Operator。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_ordered_subscriber": {
      "get": {
        "summary": "List ordered subscribers.",
        "description": "返回用OrderId指定的Subscriber一览",
        "request": {
          "limit": {
            "description": "回应1页左右的最大数"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后的Subscriber的序列號。通过指定该参数，可以获得下一个Subscriber之后的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "list_products": {
      "get": {
        "summary": "List products",
        "description": "返回商品一览。",
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create or cancel orders.",
      "description": "List, create or cancel orders."
    }
  },
  "stats": {
    "get_air_stats": {
      "get": {
        "summary": "Get Air Usage Report of Subscriber",
        "description": "获得IMSI指定的Subscriber的通信量履历。",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "以unixtime给予总计对象的开始时刻"
          },
          "to": {
            "description": "以unixtime给予总计对象的终止时刻"
          },
          "period": {
            "description": "总计单位。Minutes为前5分钟和后。"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "get_beam_stats": {
      "get": {
        "summary": "Get Beam Usage Report of Subscriber",
        "description": "获得IMSI指定的Subscriber的Soracom Beam利用量履历。",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "以unixtime给予总计对象的开始时刻"
          },
          "to": {
            "description": "以unixtime给予总计对象的终止时刻"
          },
          "period": {
            "description": "总计单位。Minutes为前5分钟和后。"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_air_stats": {
      "post": {
        "summary": "Export Air Usage Report of All Subscribers",
        "description": "以文件形式获得Operator拥有的所有Subscriber的通信量。用from, to的unixtime指定取得对象的期间。履历的详细度为月单位。输出文件的位置为AWS S3。文件的输出格式为CSV。",
        "parameters": {
          "operator_id": {
            "description": "operator_id"
          },
          "request": {
            "description": "出口時間段"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "export_beam_stats": {
      "post": {
        "summary": "Export Beam Usage Report of All Subscribers",
        "description": "以文件形式获得Operator拥有的所有Subscriber的通信量。用from, to的unixtime指定取得对象的期间。履历的详细度为月单位。输出文件的位置为AWS S3。文件的输出格式为CSV。",
        "parameters": {
          "operator_id": {
            "description": "operator ID"
          },
          "request": {
            "description": "出口時間段"
          }
        },
        "responses": {
          "status200": {
            "description": "OK."
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export statistics.",
      "description": "Show or export statistics."
    },
    "air": {
      "cli": {
        "summary": "Show or export Air statistics.",
        "description": "Show or export Air statistics."
      }
    },
    "beam": {
      "cli": {
        "summary": "Show or export Beam statistics.",
        "description": "Show or export Beam statistics."
      }
    }
  },
  "groups": {
    "list_groups": {
      "get": {
        "summary": "List Groups",
        "description": "返回Group一览",
        "parameters": {
          "tag_name": {
            "description": "Group的标签名。将完全相同的标签名作为检索对象。当指定标签名时，必须有tag value。"
          },
          "tag_value": {
            "description": "Group的Tag的值。"
          },
          "tag_value_match_mode": {
            "description": "标签的检索条件。"
          },
          "limit": {
            "description": "回应的1页左右的最大数"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后的Group的ID。通过指定该参数，可以获得从下一个Group开始的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "Group一览"
          }
        }
      }
    },
    "create_group": {
      "post": {
        "summary": "Create Group",
        "description": "新创建Group",
        "parameters": {
          "tags": {
            "description": "标签排列"
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_group": {
      "get": {
        "summary": "Get Group",
        "description": "用Group ID返回指定的Group",
        "parameters": {
          "group_id": {
            "description": "对象的Group的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "指定Group"
          },
          "status404": {
            "description": "指定Group不存在"
          }
        }
      }
    },
    "delete_group": {
      "delete": {
        "summary": "Delete Group",
        "description": "用Group ID删除指定Group",
        "parameters": {
          "group_id": {
            "description": "对象的Group的ID"
          }
        },
        "responses": {
          "status204": {
            "description": "指定Group删除完毕"
          },
          "status404": {
            "description": "指定Group不存在"
          }
        }
      }
    },
    "list_subscribers_in_group": {
      "get": {
        "summary": "List Subscribers in a group",
        "description": "返回用Group ID指定的属于Group的Subscriber一览",
        "parameters": {
          "group_id": {
            "description": "对象的Group的ID"
          },
          "limit": {
            "description": "回应1页左右的最大数"
          },
          "last_evaluated_key": {
            "description": "本页获得的最后的Subscriber的IMSI。通过指定该参数，可以获得下一个Subscriber之后的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "指定Group"
          },
          "status404": {
            "description": "指定Group不存在"
          }
        }
      }
    },
    "put_configuration_parameters": {
      "put": {
        "summary": "Update Group Configuration Parameters",
        "description": "追加、更新指定Group的参数",
        "parameters": {
          "group_id": {
            "description": "对象的Group"
          },
          "namespace": {
            "description": "对象的Configuration"
          },
          "parameters": {
            "description": "更新对象的object排列"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Group"
          },
          "status404": {
            "description": "指定Group不存在"
          }
        }
      }
    },
    "delete_configuration_parameter": {
      "delete": {
        "summary": "Delete Group Configuration Parameters",
        "description": "删除指定Group的参数",
        "parameters": {
          "group_id": {
            "description": "对象的Group"
          },
          "namespace": {
            "description": "对象参数的命名空间"
          },
          "name": {
            "description": "删除对象的参数名（由于是URL的Path的一部分，所以进行百分号编码。如果是JavaScript的话则指定encodeURIComponent()过的项目）"
          }
        },
        "responses": {
          "status204": {
            "description": "对象参数删除完毕"
          },
          "status404": {
            "description": "指定Group不存在"
          }
        }
      }
    },
    "put_group_tags": {
      "put": {
        "summary": "Update Group Tags",
        "description": "追加、更新指定Configuration Group的标签",
        "parameters": {
          "group_id": {
            "description": "对象的Group的ID"
          },
          "tags": {
            "description": "更新对象的标签排列"
          }
        },
        "responses": {
          "status200": {
            "description": "更新后的Subscriber的详细信息"
          },
          "status404": {
            "description": "指定的Subscriber不存在"
          }
        }
      }
    },
    "delete_group_tag": {
      "delete": {
        "summary": "Delete Group Tag",
        "description": "删除指定Group的标签",
        "parameters": {
          "group_id": {
            "description": "对象的Group的ID"
          },
          "tag_name": {
            "description": "删除对象的标签名（由于是URL的Path的一部分，所以进行百分号编码。如果是JavaScript的话则指定encodeURIComponent()过的项目）"
          }
        },
        "responses": {
          "status204": {
            "description": "对象标签删除完毕"
          },
          "status404": {
            "description": "指定Subscriber或标签不存在"
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete groups.",
      "description": "List, create, update or delete groups."
    }
  },
  "virtual_private_gateway": {
    "list_virtual_private_gateways": {
      "get": {
        "summary": "List Virtual Private Gateways",
        "description": "返回VPG一览",
        "parameters": {
          "tag_name": {
            "description": "VPG的标签名。完全相同的Tag名成为检索对象。指定tag name时，必须有tag value。"
          },
          "tag_value": {
            "description": "VPG的Tag的值。"
          },
          "tag_value_match_mode": {
            "description": "标签的检索条件。"
          },
          "limit": {
            "description": "回应1页左右的最大数"
          },
          "last_evaluated_key": {
            "description": "本业获得的最后的Group ID。通过指定该参数，可以获得从下一个VPG开始的列表。"
          }
        },
        "responses": {
          "status200": {
            "description": "VPG一览"
          }
        }
      }
    },
    "create_virtual_private_gateway": {
      "post": {
        "summary": "Create Virtual Private Gateway",
        "description": "新创建VPG",
        "parameters": {
          "create_virtual_private_gateway_request": {
            "description": "包含创建对象的VPG信息的请求"
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_virtual_private_gateway": {
      "get": {
        "summary": "Get Virtual Private Gateway",
        "description": "获得指定VPG的信息",
        "parameters": {
          "vpg_id": {
            "description": "对象的VPG的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "指定VPG"
          },
          "status404": {
            "description": "指定VPG不存在"
          }
        }
      }
    },
    "terminate_virtual_private_gateway": {
      "post": {
        "summary": "Terminate Virtual Private Gateway",
        "description": "将指定VPG进行Terminate",
        "parameters": {
          "vpg_id": {
            "description": "对象VPG的ID"
          }
        },
        "responses": {
          "status200": {
            "description": "开始指定VPG的Terminate操作"
          },
          "status400": {
            "description": "存在不能Terminate指定VPG的理由"
          },
          "status404": {
            "description": "指定VPG不存在"
          }
        }
      }
    },
    "open_gate": {
      "post": {
        "summary": "Open SORACOM Gate.",
        "description": "Open SORACOM Gate on the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "SORACOM Gate is successfully opened on the VPG."
          },
          "status400": {
            "description": "Client side error."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "close_gate": {
      "post": {
        "summary": "Close SORACOM Gate.",
        "description": "Close SORACOM Gate on the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "SORACOM Gate is successfully closed on the VPG."
          },
          "status400": {
            "description": "Client side error."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "list_virtual_private_gateway_peers": {
      "get": {
        "summary": "List VPG Gate peers",
        "description": "List Gate peers registered in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "List of peers registered in the VPG."
          },
          "status400": {
            "description": "Client side error in the request."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "register_virtual_private_gateway_peer": {
      "post": {
        "summary": "Register VPG Gate peer",
        "description": "Register a host as a gate peer in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Gate peer is successfully registered."
          },
          "status400": {
            "description": "Client side error in the request."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "unregister_virtual_private_gateway_peer": {
      "delete": {
        "summary": "Unregister VPG gate peer",
        "description": "Unregister a gate peer from the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "host_id": {
            "description": "ID of the target node."
          }
        },
        "responses": {
          "status204": {
            "description": "Successfully deregistered the Gate peer."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "list_virtual_private_gateway_ip_address_map_entries": {
      "get": {
        "summary": "List VPG IP address map entries",
        "description": "Describes the list of IP addresse map entries in the Virtual Private Gateway",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Successfully fetched the list of IP address map entries."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "put_virtual_private_gateway_ip_address_map_entry": {
      "post": {
        "summary": "Put an entry in VPG IP address map",
        "description": "Puts an entry in VPG IP address map.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Successfully put an entry for the specified key and IP address."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "delete_virtual_private_gateway_ip_address_map_entry": {
      "delete": {
        "summary": "Delete VPG IP address map entry",
        "description": "Deletes an entry in VPG IP address map.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "key": {
            "description": "Target key to remove."
          }
        },
        "responses": {
          "status204": {
            "description": "Successfully deleted the entry from the VPG IP address map."
          },
          "status400": {
            "description": "Error in the request."
          },
          "status404": {
            "description": "The specified VPG or node does not exist."
          }
        }
      }
    },
    "create_vpc_peering_connection": {
      "post": {
        "summary": "Create VPC Peering Connection",
        "description": "在VPG里创建VPC Peering Connection",
        "parameters": {
          "vpg_id": {
            "description": "对象VPG的ID"
          },
          "vpc_peering_connection": {
            "description": "创建对象的VPC Peering Connection"
          }
        },
        "responses": {
          "status201": {
            "description": "创建的VPC Peering Connection"
          },
          "status404": {
            "description": "指定的VPC Peering Connection不存在"
          }
        }
      }
    },
    "delete_vpc_peering_connection": {
      "delete": {
        "summary": "Delete VPC Peering Connection",
        "description": "删除指定的VPC Peering Connection",
        "parameters": {
          "vpg_id": {
            "description": "对象VPG的ID"
          },
          "pcx_id": {
            "description": "喊出对象VPC Peering Connection的ID"
          }
        },
        "responses": {
          "status204": {
            "description": "指定VPC Peering Connection删除完毕"
          },
          "status404": {
            "description": "指定VPC Peering Connection不存在"
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete VPGs.",
      "description": "List, create, update or delete VPGs (Virtual Private Gateways)."
    }
  },
  "logs": {
    "get_logs": {
      "get": {
        "summary": "Get Logs.",
        "description": "Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "resource_type": {
            "description": "Type of the target resource to query log entries."
          },
          "resource_id": {
            "description": "Identity of the target resource to query log entries."
          },
          "service": {
            "description": "Service name to filter log entries."
          },
          "from": {
            "description": "Start time for the log search range (unixtime)."
          },
          "to": {
            "description": "End time for the log search range (unixtime)."
          },
          "limit": {
            "description": "Maximum number of log entries to retrieve."
          },
          "last_evaluated_key": {
            "description": "The ID of the last resource retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of log entries."
          }
        }
      }
    },
    "cli": {
      "summary": "List logs.",
      "description": "List logs."
    }
  },
  "completion": {
    "cli": {
      "summary": "Generate script for bash completion"
    }
  },
  "configure": {
    "cli": {
      "summary": "Show, create or update configurations.",
      "description": "Show, create or update configurations.",
      "profile": {
        "prompt": "--- SORACOM CLI setup ---\nThis will create a directory %s if it does not exist yet and place '%s.json' in it.",
        "auth": {
          "prompt": "\n\nPlease select which authentication method to use.\n\n1. Input AuthKeyId and AuthKey * Recommended * \n2. Input Operator credentials (Operator Email and Password)\n3. Input SAM credentials (OperatorId, User name and Password)\n\n",
          "select": "select (1-3) > "
        },
        "coverage_type": {
          "prompt": "\n\nPlease select which coverage type to use.\n\n1. Global\n2. Japan\n\n",
          "select": "select (1-2) > "
        },
        "overwrite": "\nProfile %s already exists. Overwrite it? (Y/n) "
      }
    },
    "get": {
      "cli": {
        "summary": "Show specified profile configurations",
        "description": "Show specified profile configurations"
      }
    }
  },
  "coupons": {
    "cli": {
      "summary": "List or register coupons.",
      "description": "List or register coupons."

    }
  },
  "data": {
    "cli": {
      "summary": "Get stored data from subscribers.",
      "description": "Get stored data from subscribers."
    }
  },
  "products": {
    "cli": {
      "summary": "List products.",
      "description": "List products."
    }
  },
  "version": {
    "cli": {
      "summary": "Show version info.",
      "description": "Show version info."
    }
  },
  "cli": {
    "common_params": {
      "body": {
        "short_help": "JSON string or @filename for API request body."
      }
    }
  }
}
